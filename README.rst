*******************************
CS-Cart Development Environment
*******************************

.. contents::
   :local:

==================
Русская инструкция
==================

Среда для разработки на базе Docker:

* Версии PHP: 8.0, 7.4 и 7.3.
* Сервер баз данных MySQL 5.7.
* Веб-сервер nginx.

---------
Установка
---------

#. Установите ``git``, ``docker`` and ``docker-compose``.
#. Склонируйте репозиторий.

#. Создайте папку для файлов CS-Cart в `app/www`:

    .. code-block:: bash

        mkdir -p app/www

#. Теперь папка ``app/www`` - корневая папка сервера. Там будут размещаться файлы CS-Cart.
#. Включите приложение со стандартным конфигом nginx:

    .. code-block:: bash

        cp config/nginx/app.conf.example config/nginx/app.conf

#. Запустите контейнеры приложения:

    .. code-block:: bash

        make run

        # или можно вручную запустить только одну версию php с нужным набором сервисов: 
        docker-compose up --build php7.4 nginx mysql pma mailhog --- поднять все необходимое с одной версией php

#. Запустить bash php-контейнера:

    .. code-block::

        make cli-7.4

-------------------
Подключение к MySQL
-------------------
        
* Хост БД: mysql5.7
* Пользователь: root
* Пароль: root

-----------------------------
Работа с разными версиями PHP
-----------------------------

По умолчанию используется PHP 7.4.

Чтобы явно указать версию PHP для конкретного запроса, добавьте к домену следующую приставку:

* ``php7.3.`` для PHP 7.3.
* ``php7.4.`` для PHP 7.4.
* ``php8.0.`` для PHP 8.0.

------------------
Отправка e-mail'ов
------------------

PHP по умолчанию не отправляют настоящих писем при вызове функции ``mail()``.

Все исходящие e-mail'ы перехватываются и пишутся в папку ``app/log/sendmail``. # отрабатывает скрипт из ./bin/sendmail

Можно перехватывать письма с помощью MailHog для этого в настройках магазина в админке  `Настройки -> Электронная почта` выбрать:

```
    Способ отправки -> через SMTP сервер
    SMTP сервер     -> mailhog:1025      # (контейнер mailhog)
```

---------------------------------
Работа с несколькими приложениями
---------------------------------

См. комментарии в файле ``config/nginx/app.conf.example``.

------------------------
Поддержка xDebug для PHP
------------------------

xDebug уже настроен для использования в контейнерах с PHP7 и PHP8. Для его включения нужно раскомментировать установку модуля в ``config/php*/Dockerfile``.

О настройке PHPStorm для работы с Docker и xDebug 3 можно прочитать в статье `"PHP: Настраиваем отладку" <https://handynotes.ru/2020/12/phpstorm-php-8-docker-xdebug-3.html>`_.

------------------------
Настройка подсети докера
------------------------

Docker-compose по умолчанию создаёт подсеть с адресами 172.18.[0-255].[0-255]. 

Если локально запустить докер с дефолтной подсетью, то ресурсы, использующие такие же адреса, будут недоступны - ответ возвращать будет локальная подсеть, а не требуемый ресурс.

Чтобы исправить проблему, нужно изменить адрес подсети докера. 

В файле docker-compose.yml приведён пример замены адресов на 10.10.[0-255].[0-255].

Раскомментируйте строки в docker-compose.yml и выполните следующие команды:

    .. code-block:: bash

        $ docker network rm $(docker network ls -q)
        $ docker-compose down && docker-compose up -d
